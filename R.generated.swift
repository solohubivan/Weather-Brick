//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: Brick is dry - sunny
      ///
      /// Key: brick_is_dry_sunny
      var brick_is_dry_sunny: RswiftResources.StringResource { .init(key: "brick_is_dry_sunny", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Brick is gone - No Internet
      ///
      /// Key: brick_is_gone_no_internet
      var brick_is_gone_no_internet: RswiftResources.StringResource { .init(key: "brick_is_gone_no_internet", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Brick is hard to see - fog
      ///
      /// Key: brick_is_hard_to_see_fog
      var brick_is_hard_to_see_fog: RswiftResources.StringResource { .init(key: "brick_is_hard_to_see_fog", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Brick is swinging - windy
      ///
      /// Key: brick_is_swinging_windy
      var brick_is_swinging_windy: RswiftResources.StringResource { .init(key: "brick_is_swinging_windy", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Brick is wet - raining
      ///
      /// Key: brick_is_wet_raining
      var brick_is_wet_raining: RswiftResources.StringResource { .init(key: "brick_is_wet_raining", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Brick with cracks - very hot
      ///
      /// Key: brick_with_cracks_very_hot
      var brick_with_cracks_very_hot: RswiftResources.StringResource { .init(key: "brick_with_cracks_very_hot", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Brick with snow - snow
      ///
      /// Key: brick_with_snow_snow
      var brick_with_snow_snow: RswiftResources.StringResource { .init(key: "brick_with_snow_snow", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Clear
      ///
      /// Key: clear
      var clear: RswiftResources.StringResource { .init(key: "clear", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Drizzle
      ///
      /// Key: drizzle
      var drizzle: RswiftResources.StringResource { .init(key: "drizzle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Fog
      ///
      /// Key: fog
      var fog: RswiftResources.StringResource { .init(key: "fog", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Haze
      ///
      /// Key: haze
      var haze: RswiftResources.StringResource { .init(key: "haze", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Hide
      ///
      /// Key: hide
      var hide: RswiftResources.StringResource { .init(key: "hide", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: INFO
      ///
      /// Key: info
      var info: RswiftResources.StringResource { .init(key: "info", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Mist
      ///
      /// Key: mist
      var mist: RswiftResources.StringResource { .init(key: "mist", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Rain
      ///
      /// Key: rain
      var rain: RswiftResources.StringResource { .init(key: "rain", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Snow
      ///
      /// Key: snow
      var snow: RswiftResources.StringResource { .init(key: "snow", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Sunny
      ///
      /// Key: sunny
      var sunny: RswiftResources.StringResource { .init(key: "sunny", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.image` struct is generated, and contains static references to 7 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `icon_location`.
    var icon_location: RswiftResources.ImageResource { .init(name: "icon_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_search`.
    var icon_search: RswiftResources.ImageResource { .init(name: "icon_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image_background`.
    var image_background: RswiftResources.ImageResource { .init(name: "image_background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image_stone_cracks`.
    var image_stone_cracks: RswiftResources.ImageResource { .init(name: "image_stone_cracks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image_stone_normal`.
    var image_stone_normal: RswiftResources.ImageResource { .init(name: "image_stone_normal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image_stone_snow`.
    var image_stone_snow: RswiftResources.ImageResource { .init(name: "image_stone_snow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image_stone_wet`.
    var image_stone_wet: RswiftResources.ImageResource { .init(name: "image_stone_wet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Ubuntu-Bold`.
    var ubuntuBold: RswiftResources.FontResource { .init(name: "Ubuntu-Bold", bundle: bundle, filename: "Ubuntu-Bold.ttf") }

    /// Font `Ubuntu-Light`.
    var ubuntuLight: RswiftResources.FontResource { .init(name: "Ubuntu-Light", bundle: bundle, filename: "Ubuntu-Light.ttf") }

    /// Font `Ubuntu-Medium`.
    var ubuntuMedium: RswiftResources.FontResource { .init(name: "Ubuntu-Medium", bundle: bundle, filename: "Ubuntu-Medium.ttf") }

    /// Font `Ubuntu-Regular`.
    var ubuntuRegular: RswiftResources.FontResource { .init(name: "Ubuntu-Regular", bundle: bundle, filename: "Ubuntu-Regular.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [ubuntuBold, ubuntuLight, ubuntuMedium, ubuntuRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 4 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Ubuntu-Bold.ttf`.
    var ubuntuBoldTtf: RswiftResources.FileResource { .init(name: "Ubuntu-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Ubuntu-Light.ttf`.
    var ubuntuLightTtf: RswiftResources.FileResource { .init(name: "Ubuntu-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Ubuntu-Medium.ttf`.
    var ubuntuMediumTtf: RswiftResources.FileResource { .init(name: "Ubuntu-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Ubuntu-Regular.ttf`.
    var ubuntuRegularTtf: RswiftResources.FileResource { .init(name: "Ubuntu-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `InfoPageView`.
    var infoPageView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "InfoPageView", bundle: bundle) }

    /// Nib `MainViewController`.
    var mainViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MainViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "image_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image_background' is used in nib 'InfoPageView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image_background' is used in nib 'MainViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "image_background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image_background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}